ffi-rzmq
    by Chuck Remes
    http://www.zeromq.org/bindings:ruby-ffi

== DESCRIPTION:

This gem wraps the ZeroMQ networking library using the ruby FFI (foreign
function interface). It's a pure ruby wrapper so this gem can be loaded
and run by any ruby runtime that supports FFI. That's all of them:
MRI 1.9.x, Rubinius and JRuby.

The impetus behind this library was to provide support for ZeroMQ in
JRuby which has native threads. Unlike MRI, IronRuby and
Rubinius which all have a GIL, JRuby allows for threaded access to ruby
code from outside extensions. ZeroMQ is heavily threaded, so until the
other runtimes remove their GIL, JRuby will likely be the best
environment to run this library.

== PERFORMANCE

Check out the latest performance results:

  http://www.zeromq.org/bindings:ruby-ffi

== FEATURES/PROBLEMS:

This gem needs more tests. I'm certain there are a
ton of bugs, so please open issues for them here or fork this project,
fix them, and send me a pull request.

The 'ffi' gem has dropped support for MRI 1.8.x. Since this project relies
on that gem to load and run this code, then this project also no longer
supports MRI 1.8.x. 

All features are implemented.

== SYNOPSIS:

Client code:
  
  require 'rubygems'
  require 'ffi-rzmq'
  
  if ARGV.length < 3
    puts "usage: local_lat <connect-to> <message-size> <roundtrip-count>"
    exit
  end
  
  bind_to = ARGV[0]
  message_size = ARGV[1].to_i
  roundtrip_count = ARGV[2].to_i
  
  ctx = ZMQ::Context.new
  s = ctx.socket ZMQ::REP
  s.setsockopt(ZMQ::HWM, 100)
  s.bind(bind_to)
  
  roundtrip_count.times do
    msg = s.recv_string 0
    raise "Message size doesn't match, expected [#{message_size}] but received [#{msg.size}]" if message_size != msg.size
    s.send_string msg, 0
  end
  
  # give the lib time to flush any remaining messages
  sleep 1

Server code:

  require 'rubygems'
  require 'ffi-rzmq'
  
  if ARGV.length < 3
    puts "usage: remote_lat <connect-to> <message-size> <roundtrip-count>"
    exit
  end
  
  connect_to = ARGV[0]
  message_size = ARGV[1].to_i
  roundtrip_count = ARGV[2].to_i
  
  ctx = ZMQ::Context.new
  s = ctx.socket ZMQ::REQ
  s.connect(connect_to)
  
  msg = "#{ '3' * message_size }"
  
  start_time = Time.now
  
  roundtrip_count.times do
    s.send_string msg, 0
    msg = s.recv_string 0
    raise "Message size doesn't match, expected [#{message_size}] but received [#{msg.size}]" if message_size != msg.size
  end
  
== Better Examples

I highly recommend visiting the Learn Ruby 0mq project for a bunch of good code examples.

  http://github.com/andrewvc/learn-ruby-zeromq
  


== REQUIREMENTS:

  * 0mq 2.0.10 or 2.1+
  
The ZeroMQ library must be installed on your system in a well-known location
like /usr/local/lib. This is the default for new ZeroMQ installs.

If you have installed ZeroMQ using brew, you need to `brew link zeromq` before installing this gem.

Future releases may include the library as a C extension built at
time of installation.

  * ffi (>= 1.0.0)
  
This is a requirement for MRI only. Both Rubinius and JRuby have FFI support built
in as a standard component. Do *not* run this gem under MRI with an old 'ffi' gem.
It will crash randomly and you will be sad.


== INSTALL:

A full gem has been released to rubygems.org as of release 0.5.0.
Make sure the ZeroMQ library is already installed on your system.

 % gem install ffi-rzmq # should grab the latest release


To build from git master:

 % git clone git://github.com/chuckremes/ffi-rzmq
 % cd ffi-rzmq
 % gem build ffi-rzmq.gemspec
 % gem install ffi-rzmq-*.gem
 
 

== LICENSE:

(The MIT License)

Copyright (c) 2010 Chuck Remes

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
